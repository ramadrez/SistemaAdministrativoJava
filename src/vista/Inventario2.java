/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import conexion.Conexion;
import controlador.Ctrl_Inventario;
import controlador.Ctrl_Productos;
import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import modelo.Inventario;
import modelo.Productos;

/**
 *
 * @author Rama
 */
public class Inventario2 extends javax.swing.JPanel {

    int idproducto = 0;
    int objetos = 0;
    Inventario i = new Inventario();
    Ctrl_Inventario ci = new Ctrl_Inventario();
    Productos p = new Productos();
    DefaultTableModel Inventario = new DefaultTableModel();

    /**
     * Creates new form ClientesBuscar
     */
    public Inventario2() {
        initComponents();

        this.cargarproductos();
        this.cargarproveedores();
        jTable1.getTableHeader().setDefaultRenderer(new HeaderColor());
        listarInventario();
    }

    public class HeaderColor extends DefaultTableCellRenderer {

        public HeaderColor() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            setBackground(new java.awt.Color(255, 255, 255));
            return this;
        }

    }

    private void listarInventario() {
        List<Inventario> lista = ci.listar();
        Inventario = (DefaultTableModel) jTable1.getModel();
        Object[] ob = new Object[6];
        for (int i = 0; i < lista.size(); i++) {
            ob[0] = lista.get(i).getCodigo();
            ob[1] = lista.get(i).getProducto();
            ob[2] = lista.get(i).getAdicion();
            ob[3] = lista.get(i).getSustraccion();
            ob[4] = lista.get(i).getFecha();
            ob[5] = lista.get(i).getProveedor();
            Inventario.addRow(ob);
        }
        jTable1.setModel(Inventario);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CATEGORIAS = new javax.swing.JPanel();
        jComboBox_producto = new javax.swing.JComboBox<>();
        jComboBox_Proveedores = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cantidad_actual = new javax.swing.JTextField();
        cantidad_nuevo = new javax.swing.JTextField();
        INGRESO_PRODUCTOS = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Navegador = new javax.swing.JTextField();
        BusquedaTxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        restar_boton = new javax.swing.JButton();
        a√±adir_boton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CATEGORIAS.setBackground(new java.awt.Color(255, 255, 255));

        jComboBox_producto.setToolTipText("");
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });

        jLabel2.setText("Producto");

        jLabel4.setText("Proveedor");

        jLabel5.setText("Stock Actual");

        jLabel7.setText("Stock Nuevo ");

        cantidad_actual.setEnabled(false);

        cantidad_nuevo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cantidad_nuevoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout CATEGORIASLayout = new javax.swing.GroupLayout(CATEGORIAS);
        CATEGORIAS.setLayout(CATEGORIASLayout);
        CATEGORIASLayout.setHorizontalGroup(
            CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CATEGORIASLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CATEGORIASLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3))
                    .addGroup(CATEGORIASLayout.createSequentialGroup()
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(34, 34, 34)
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox_producto, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_Proveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(155, 155, 155)
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cantidad_actual)
                            .addComponent(cantidad_nuevo, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        CATEGORIASLayout.setVerticalGroup(
            CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CATEGORIASLayout.createSequentialGroup()
                .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CATEGORIASLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel3))
                    .addGroup(CATEGORIASLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jComboBox_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(cantidad_actual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CATEGORIASLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cantidad_nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(CATEGORIASLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(CATEGORIASLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jComboBox_Proveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(CATEGORIAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 90));

        INGRESO_PRODUCTOS.setBackground(new java.awt.Color(156, 211, 216));

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel6.setText("INGRESO DE ARTICULOS");

        Navegador.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        Navegador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NavegadorKeyReleased(evt);
            }
        });

        BusquedaTxt.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        BusquedaTxt.setText("B√∫squeda");

        javax.swing.GroupLayout INGRESO_PRODUCTOSLayout = new javax.swing.GroupLayout(INGRESO_PRODUCTOS);
        INGRESO_PRODUCTOS.setLayout(INGRESO_PRODUCTOSLayout);
        INGRESO_PRODUCTOSLayout.setHorizontalGroup(
            INGRESO_PRODUCTOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(INGRESO_PRODUCTOSLayout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(jLabel6)
                .addGap(75, 75, 75)
                .addComponent(BusquedaTxt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Navegador, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        INGRESO_PRODUCTOSLayout.setVerticalGroup(
            INGRESO_PRODUCTOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, INGRESO_PRODUCTOSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(INGRESO_PRODUCTOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(Navegador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BusquedaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(INGRESO_PRODUCTOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 700, 40));

        jScrollPane1.setFocusTraversalPolicyProvider(true);
        jScrollPane1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Producto", "Adicion", "Sustraccion", "Fecha", "Proveedor"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 700, 280));

        restar_boton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        restar_boton.setText("Restar");
        restar_boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restar_botonActionPerformed(evt);
            }
        });
        add(restar_boton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 90, -1, -1));

        a√±adir_boton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        a√±adir_boton1.setText("A√±adir");
        a√±adir_boton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a√±adir_boton1ActionPerformed(evt);
            }
        });
        add(a√±adir_boton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        this.mostrarstock();
    }//GEN-LAST:event_jComboBox_productoActionPerformed

    private void restar_botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restar_botonActionPerformed

        String Fecha = "";
        Date date = new Date();
        Fecha = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox_producto.getSelectedItem().equals("Seleccione Producto:")) {

            p.setProducto(jComboBox_producto.getSelectedItem().toString());
            ci.obtenerDatos(p);
            i.setCodigo(ci.getCodigo());
            i.setProducto(jComboBox_producto.getSelectedItem().toString());
            i.setAdicion(0);
            i.setFecha(Fecha);
            

            if (!jComboBox_Proveedores.getSelectedItem().equals("Seleccione:")) {
                
                i.setProveedor(jComboBox_Proveedores.getSelectedItem().toString());
                
                
                if (!cantidad_nuevo.getText().isEmpty()) {
                    i.setSustraccion(Integer.parseInt(cantidad_nuevo.getText()));
                    int cantidadnuevaint = Integer.parseInt(cantidad_nuevo.getText());
                    if (cantidadnuevaint > 0) {
                        Ctrl_Productos cp = new Ctrl_Productos();
                        int StockActual = Integer.parseInt(cantidad_actual.getText().trim());
                        int StockNuevo = Integer.parseInt(cantidad_nuevo.getText().trim());

                        StockNuevo = StockActual - StockNuevo;
                        if (StockNuevo < 0) {
                            JOptionPane.showMessageDialog(null, "La cantidad a restar es mayor a la de inventario");
                        } else {
                            p.setCantidad(StockNuevo);
                            ci.insertar(i);
                            limpiarTabla();
                            listarInventario();
                            if (cp.actualizarstock(p, idproducto)) {
                                JOptionPane.showMessageDialog(null, "Stock Actualizado, Resta del inventario exitosa");
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al actualizar Stock");
                            }
                            cantidad_nuevo.setText("");
                            mostrarstock();

                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser 0 o negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad para sumar o restar el stock");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un proveedor");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        }


    }//GEN-LAST:event_restar_botonActionPerformed

    private void cantidad_nuevoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidad_nuevoKeyTyped
        char ch = evt.getKeyChar();
        if (cantidad_nuevo.getText().length() >= 100 || ch < '0' || ch > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_cantidad_nuevoKeyTyped

    private void a√±adir_boton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a√±adir_boton1ActionPerformed

        String Fecha = "";
        Date date = new Date();
        Fecha = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox_producto.getSelectedItem().equals("Seleccione Producto:")) {
            p.setProducto(jComboBox_producto.getSelectedItem().toString());
            ci.obtenerDatos(p);
            i.setCodigo(ci.getCodigo());
            i.setProducto(jComboBox_producto.getSelectedItem().toString());
            i.setSustraccion(0);
            i.setFecha(Fecha);
            if (!jComboBox_Proveedores.getSelectedItem().equals("Seleccione:")) {
                i.setProveedor(jComboBox_Proveedores.getSelectedItem().toString());
                if (!cantidad_nuevo.getText().isEmpty()) {
                    i.setAdicion(Integer.parseInt(cantidad_nuevo.getText()));
                    int cantidadnuevaint = Integer.parseInt(cantidad_nuevo.getText());
                    if (cantidadnuevaint > 0) {
                        Ctrl_Productos cp = new Ctrl_Productos();
                        int StockActual = Integer.parseInt(cantidad_actual.getText().trim());
                        int StockNuevo = Integer.parseInt(cantidad_nuevo.getText().trim());

                        StockNuevo = StockActual + StockNuevo;
                        p.setCantidad(StockNuevo);

                        ci.insertar(i);
                        limpiarTabla();
                        listarInventario();

                        if (cp.actualizarstock(p, idproducto)) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado, Suma del inventario Exitosa");
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al actualizar Stock");
                        }

                        cantidad_nuevo.setText("");
                        mostrarstock();

                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser 0 o negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad para sumar o restar el stock");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un proveedor");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        }
    }//GEN-LAST:event_a√±adir_boton1ActionPerformed

    private void NavegadorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NavegadorKeyReleased
        filtrar();
    }//GEN-LAST:event_NavegadorKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BusquedaTxt;
    private javax.swing.JPanel CATEGORIAS;
    private javax.swing.JPanel INGRESO_PRODUCTOS;
    private javax.swing.JTextField Navegador;
    private javax.swing.JButton a√±adir_boton1;
    private javax.swing.JTextField cantidad_actual;
    private javax.swing.JTextField cantidad_nuevo;
    private javax.swing.JComboBox<String> jComboBox_Proveedores;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton restar_boton;
    // End of variables declaration//GEN-END:variables

    private void cargarproductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from productos";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione Producto:");
            while (rs.next()) {

                jComboBox_producto.addItem(rs.getString("producto"));

            }

        } catch (SQLException e) {
            System.out.println("error al cargar los productos en:" + e);
        }

    }

    private void cargarproveedores() {
        Connection cn = Conexion.conectar();
        String sql = "select * from proveedores";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_Proveedores.removeAllItems();
            jComboBox_Proveedores.addItem("Seleccione:");
            while (rs.next()) {

                jComboBox_Proveedores.addItem(rs.getString("nombre"));

            }

        } catch (SQLException e) {
            System.out.println("error al cargar los Proveedores en:" + e);
        }
    }

    private void mostrarstock() {

        try {
            Connection cn = Conexion.conectar();
            String sql = "select * from productos where producto = '" + this.jComboBox_producto.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                idproducto = rs.getInt("idProducto");
                objetos = rs.getInt("cantidad");
                cantidad_actual.setText("" + objetos);

            } else {
                cantidad_actual.setText("'");
            }

        } catch (Exception e) {
            System.out.println("error al obtener stock de productos:" + e);
        }
    }

    private boolean Validar(String Valor) {
        int num;
        try {

            num = Integer.parseInt(Valor);
            return true;

        } catch (NumberFormatException e) {

            return false;
        }

    }

    void limpiarTabla() {
        for (int i = 0; i < Inventario.getRowCount(); i++) {
            Inventario.removeRow(i);
            i = 0 - 1;
        }
    }
    
    
     void filtrar() {
        TableRowSorter sorter = new TableRowSorter(Inventario);
        jTable1.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKey = new ArrayList<>();
        sortKey.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKey);

        try {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + Navegador.getText()));
        } catch (Exception e) {
        }
    }
     
}
