package vista;

import config.Archivo;
import config.Encriptacion;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Rama
 */
public class RespaldoBD extends javax.swing.JPanel {

    /**
     * Creates new form ClientesBuscar
     */
    public RespaldoBD() {
        initComponents();
        leerFechaExport();
        fechaExportacion.setText(leerFechaExport());
        leerFechaImport();
        fechaImportacion.setText(leerFechaImport());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Contenedor = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        Subtitulo = new javax.swing.JLabel();
        textoExportar = new javax.swing.JLabel();
        textFieldExportar = new javax.swing.JTextField();
        carpetaExportar = new javax.swing.JLabel();
        contenedorDetalles = new vista.JpanelRound();
        jpanelRound6 = new vista.JpanelRound();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fechaExportacion = new javax.swing.JLabel();
        buttonExportar = new vista.JpanelRound();
        txtButtonExportar = new javax.swing.JLabel();
        textoImportar = new javax.swing.JLabel();
        textFieldImportar = new javax.swing.JTextField();
        carpetaImportar = new javax.swing.JLabel();
        contenedorDetalles2 = new vista.JpanelRound();
        fondoContenedor2 = new vista.JpanelRound();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fechaImportacion = new javax.swing.JLabel();
        buttonImportar = new vista.JpanelRound();
        txtButtonImportar = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 450));

        Contenedor.setBackground(new java.awt.Color(255, 255, 255));
        Contenedor.setMinimumSize(new java.awt.Dimension(700, 450));
        Contenedor.setPreferredSize(new java.awt.Dimension(700, 450));
        Contenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titulo.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        Titulo.setText("Respaldo");
        Contenedor.add(Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 26, -1, -1));

        Subtitulo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        Subtitulo.setForeground(new java.awt.Color(6, 150, 166));
        Subtitulo.setText("Exportar e Importar su base de datos");
        Contenedor.add(Subtitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        textoExportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        textoExportar.setText("Ruta para exportar Backup");
        Contenedor.add(textoExportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        textFieldExportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        textFieldExportar.setText("src/DatabaseBackup/sistema_compraventa.sql");
        textFieldExportar.setEnabled(false);
        Contenedor.add(textFieldExportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 260, -1));

        carpetaExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/carpeta.png"))); // NOI18N
        carpetaExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        carpetaExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                carpetaExportarMousePressed(evt);
            }
        });
        Contenedor.add(carpetaExportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, -1, -1));

        contenedorDetalles.setBackground(new java.awt.Color(244, 244, 244));
        contenedorDetalles.setRoundBottomLeft(10);
        contenedorDetalles.setRoundBottomRight(10);
        contenedorDetalles.setRoundTopLeft(10);
        contenedorDetalles.setRoundTopRight(10);

        jpanelRound6.setBackground(new java.awt.Color(255, 255, 255));
        jpanelRound6.setRoundBottomLeft(5);
        jpanelRound6.setRoundBottomRight(5);
        jpanelRound6.setRoundTopLeft(5);
        jpanelRound6.setRoundTopRight(5);

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel5.setText("Detalles");

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel6.setText("Ultima Exportacion");

        fechaExportacion.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        fechaExportacion.setText(".");

        javax.swing.GroupLayout jpanelRound6Layout = new javax.swing.GroupLayout(jpanelRound6);
        jpanelRound6.setLayout(jpanelRound6Layout);
        jpanelRound6Layout.setHorizontalGroup(
            jpanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelRound6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(fechaExportacion))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jpanelRound6Layout.setVerticalGroup(
            jpanelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelRound6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaExportacion)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contenedorDetallesLayout = new javax.swing.GroupLayout(contenedorDetalles);
        contenedorDetalles.setLayout(contenedorDetallesLayout);
        contenedorDetallesLayout.setHorizontalGroup(
            contenedorDetallesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorDetallesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelRound6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        contenedorDetallesLayout.setVerticalGroup(
            contenedorDetallesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorDetallesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpanelRound6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Contenedor.add(contenedorDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 230, 170));

        buttonExportar.setBackground(new java.awt.Color(156, 211, 216));
        buttonExportar.setRoundBottomLeft(10);
        buttonExportar.setRoundBottomRight(10);
        buttonExportar.setRoundTopLeft(10);
        buttonExportar.setRoundTopRight(10);

        txtButtonExportar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtButtonExportar.setForeground(new java.awt.Color(255, 255, 255));
        txtButtonExportar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtButtonExportar.setText("Exportar");
        txtButtonExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtButtonExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtButtonExportarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtButtonExportarMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtButtonExportarMousePressed(evt);
            }
        });

        javax.swing.GroupLayout buttonExportarLayout = new javax.swing.GroupLayout(buttonExportar);
        buttonExportar.setLayout(buttonExportarLayout);
        buttonExportarLayout.setHorizontalGroup(
            buttonExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtButtonExportar, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        buttonExportarLayout.setVerticalGroup(
            buttonExportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtButtonExportar, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        Contenedor.add(buttonExportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 180, 50));

        textoImportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        textoImportar.setText("Ruta para importar Backup");
        Contenedor.add(textoImportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        textFieldImportar.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        textFieldImportar.setText("src/DatabaseBackup/sistema_compraventa.sql");
        textFieldImportar.setEnabled(false);
        Contenedor.add(textFieldImportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 250, -1));

        carpetaImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/carpeta.png"))); // NOI18N
        carpetaImportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        carpetaImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                carpetaImportarMousePressed(evt);
            }
        });
        Contenedor.add(carpetaImportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 120, -1, -1));

        contenedorDetalles2.setBackground(new java.awt.Color(244, 244, 244));
        contenedorDetalles2.setRoundBottomLeft(10);
        contenedorDetalles2.setRoundBottomRight(10);
        contenedorDetalles2.setRoundTopLeft(10);
        contenedorDetalles2.setRoundTopRight(10);

        fondoContenedor2.setBackground(new java.awt.Color(255, 255, 255));
        fondoContenedor2.setRoundBottomLeft(5);
        fondoContenedor2.setRoundBottomRight(5);
        fondoContenedor2.setRoundTopLeft(5);
        fondoContenedor2.setRoundTopRight(5);

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel2.setText("Detalles");

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel3.setText("Ultima Importacion");

        fechaImportacion.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        fechaImportacion.setText(".");

        javax.swing.GroupLayout fondoContenedor2Layout = new javax.swing.GroupLayout(fondoContenedor2);
        fondoContenedor2.setLayout(fondoContenedor2Layout);
        fondoContenedor2Layout.setHorizontalGroup(
            fondoContenedor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoContenedor2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fondoContenedor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(fechaImportacion))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        fondoContenedor2Layout.setVerticalGroup(
            fondoContenedor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoContenedor2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaImportacion)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contenedorDetalles2Layout = new javax.swing.GroupLayout(contenedorDetalles2);
        contenedorDetalles2.setLayout(contenedorDetalles2Layout);
        contenedorDetalles2Layout.setHorizontalGroup(
            contenedorDetalles2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenedorDetalles2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fondoContenedor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        contenedorDetalles2Layout.setVerticalGroup(
            contenedorDetalles2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenedorDetalles2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fondoContenedor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Contenedor.add(contenedorDetalles2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 190, 230, 170));

        buttonImportar.setBackground(new java.awt.Color(156, 211, 216));
        buttonImportar.setRoundBottomLeft(10);
        buttonImportar.setRoundBottomRight(10);
        buttonImportar.setRoundTopLeft(10);
        buttonImportar.setRoundTopRight(10);

        txtButtonImportar.setBackground(new java.awt.Color(255, 255, 255));
        txtButtonImportar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtButtonImportar.setForeground(new java.awt.Color(255, 255, 255));
        txtButtonImportar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtButtonImportar.setText("Importar");
        txtButtonImportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtButtonImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtButtonImportarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtButtonImportarMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtButtonImportarMousePressed(evt);
            }
        });

        javax.swing.GroupLayout buttonImportarLayout = new javax.swing.GroupLayout(buttonImportar);
        buttonImportar.setLayout(buttonImportarLayout);
        buttonImportarLayout.setHorizontalGroup(
            buttonImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtButtonImportar, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
        );
        buttonImportarLayout.setVerticalGroup(
            buttonImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtButtonImportar, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        Contenedor.add(buttonImportar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 380, 180, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtButtonExportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonExportarMousePressed
        this.crearBackup();

    }//GEN-LAST:event_txtButtonExportarMousePressed

    private void txtButtonExportarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonExportarMouseEntered
        buttonExportar.setBackground(new Color(3, 150, 166));
    }//GEN-LAST:event_txtButtonExportarMouseEntered

    private void txtButtonExportarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonExportarMouseExited
        buttonExportar.setBackground(new Color(156, 211, 216));
    }//GEN-LAST:event_txtButtonExportarMouseExited

    private void txtButtonImportarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonImportarMouseEntered
        buttonImportar.setBackground(new Color(3, 150, 166));
    }//GEN-LAST:event_txtButtonImportarMouseEntered

    private void txtButtonImportarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonImportarMouseExited
        buttonImportar.setBackground(new Color(156, 211, 216));
    }//GEN-LAST:event_txtButtonImportarMouseExited

    private void carpetaExportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carpetaExportarMousePressed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RespaldoBD.class.getName()).log(Level.SEVERE, null, ex);
        }

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int seleccion = fc.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivoselected = fc.getSelectedFile();
            textFieldExportar.setText(archivoselected.getAbsolutePath() + "/sistema_compraventa.sql");
        }


    }//GEN-LAST:event_carpetaExportarMousePressed

    private void carpetaImportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carpetaImportarMousePressed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RespaldoBD.class.getName()).log(Level.SEVERE, null, ex);
        }
        JFileChooser fc = new JFileChooser();

        int seleccion = fc.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivoselected = fc.getSelectedFile();
            textFieldImportar.setText(archivoselected.getAbsolutePath());
        }
    }//GEN-LAST:event_carpetaImportarMousePressed

    private void txtButtonImportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtButtonImportarMousePressed
        this.importarBackup();

    }//GEN-LAST:event_txtButtonImportarMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Contenedor;
    private javax.swing.JLabel Subtitulo;
    private javax.swing.JLabel Titulo;
    private vista.JpanelRound buttonExportar;
    private vista.JpanelRound buttonImportar;
    private javax.swing.JLabel carpetaExportar;
    private javax.swing.JLabel carpetaImportar;
    private vista.JpanelRound contenedorDetalles;
    private vista.JpanelRound contenedorDetalles2;
    private javax.swing.JLabel fechaExportacion;
    private javax.swing.JLabel fechaImportacion;
    private vista.JpanelRound fondoContenedor2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private vista.JpanelRound jpanelRound6;
    private javax.swing.JTextField textFieldExportar;
    private javax.swing.JTextField textFieldImportar;
    private javax.swing.JLabel textoExportar;
    private javax.swing.JLabel textoImportar;
    private javax.swing.JLabel txtButtonExportar;
    private javax.swing.JLabel txtButtonImportar;
    // End of variables declaration//GEN-END:variables

    public void crearBackup() {
        Encriptacion en = new Encriptacion();
        Archivo ar = new Archivo();
        String userD = en.Desencriptar(ar.LeerArchivoUser());
        String passD = en.Desencriptar(ar.LeerArchivoPass());

        Process p;

        try {
            p = Runtime.getRuntime().exec("mysqldump -u " + userD + " -p" + passD + " sistema_compraventa");
            InputStream is = p.getInputStream();
            FileOutputStream archivo = new FileOutputStream(textFieldExportar.getText());

            byte[] buffer = new byte[1000];
            int byteleido = is.read(buffer);

            while (byteleido > 0) {
                archivo.write(buffer, 0, byteleido);
                byteleido = is.read(buffer);
            }

            archivo.close();
            GuardarFechaExport();
            fechaExportacion.setText(leerFechaExport());
            JOptionPane.showMessageDialog(null, "Respaldo realizado correctamente");

        } catch (IOException ex) {
            Logger.getLogger(RespaldoBD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error: respaldo no realizado");
            JOptionPane.showMessageDialog(null, "Verique el Path u Instalacion del Mysql");
        }

    }

    public void importarBackup() {

        Encriptacion en = new Encriptacion();
        Archivo ar = new Archivo();
        String userD = en.Desencriptar(ar.LeerArchivoUser());
        String passD = en.Desencriptar(ar.LeerArchivoPass());

        Process p;

        try {
            p = Runtime.getRuntime().exec("mysql -u " + userD + " -p" + passD + " sistema_compraventa");
            OutputStream is = p.getOutputStream();
            FileInputStream archivo = new FileInputStream(textFieldImportar.getText());

            byte[] buffer = new byte[1000];
            int byteleido = archivo.read(buffer);

            while (byteleido > 0) {
                is.write(buffer, 0, byteleido);
                byteleido = archivo.read(buffer);
            }

            is.flush();
            is.close();
            archivo.close();

            GuardarFechaImport();
            fechaImportacion.setText(leerFechaImport());
            JOptionPane.showMessageDialog(null, "Respaldo importado correctamente");

        } catch (IOException ex) {
            Logger.getLogger(RespaldoBD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error: La importacion no pudo ser llevada a cabo");
            JOptionPane.showMessageDialog(null, "Verique el Path u Instalacion del Mysql");
        }

    }

    public void GuardarFechaImport() {

        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String fechaHoraFormateada = fechaHoraActual.format(formatter);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/config/fechaI.txt"))) {
            writer.write(fechaHoraFormateada);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String leerFechaImport() {
        String fecha = "";
        try (BufferedReader reader = new BufferedReader(new FileReader("src/config/fechaI.txt"))) {
            fecha = reader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return fecha;
    }

    public void GuardarFechaExport() {
        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String fechaHoraFormateada = fechaHoraActual.format(formatter);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/config/fechaE.txt"))) {
            writer.write(fechaHoraFormateada);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String leerFechaExport() {
        String fecha = "";
        try (BufferedReader reader = new BufferedReader(new FileReader("src/config/fechaE.txt"))) {
            fecha = reader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return fecha;
    }

}
